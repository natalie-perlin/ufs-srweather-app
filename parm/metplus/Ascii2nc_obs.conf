# ASCII2nc METplus Configuration

[config]

# List of applications (tools) to run.
PROCESS_LIST = ASCII2NC

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = INIT

# Format of INIT_BEG and INIT_END using % items
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
INIT_TIME_FMT = %Y%m%d%H

# Start time for METplus run - must match INIT_TIME_FMT
INIT_BEG = {{cdate}}

# End time for METplus run - must match INIT_TIME_FMT
INIT_END = {{cdate}}

# Increment between METplus runs (in seconds if no units are specified).
# Must be >= 60 seconds.
INIT_INCREMENT = 3600

# List of forecast leads to process for each run time (init or valid)
# In hours if units are not specified
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = {{fhr_list}}

# Order of loops to process data - Options are times, processes
# Not relevant if only one item is in the PROCESS_LIST
# times = run all wrappers in the PROCESS_LIST for a single run time, then
#   increment the run time and run all wrappers again until all times have
#   been evaluated.
# processes = run the first wrapper in the PROCESS_LIST for all times
#   specified, then repeat for the next item in the PROCESS_LIST until all
#   wrappers have been run
LOOP_ORDER = times
#
# Verbosity of MET logging output.  0 to 5; 0 is quiet, 5 is loud.
#
LOG_{{METPLUS_TOOL_NAME}}_VERBOSITY = {{metplus_verbosity_level}}
#
# Specify the name of the METplus log file.
#
LOG_METPLUS = {LOG_DIR}/{{metplus_log_fn}}
#
# Specify the location and name of the final METplus conf file.
#
METPLUS_CONF = {ASCII2NC_OUTPUT_DIR}/metplus_final.{{metplus_config_fn}}
#
# Location of MET configuration file to pass to Ascii2nc.
#
# References PARM_BASE, which is the location of the parm directory
# corresponding to the ush directory of the run_metplus.py script that
# is called or the value of the environment variable METPLUS_PARM_BASE
# if set.
#
ASCII2NC_CONFIG_FILE = {PARM_BASE}/met_config/Ascii2NcConfig_wrapped
#
# Name to identify observation data in output.
#
OBTYPE = {{obtype}}
# For AERONET and Airnow data, times in the file are always top of the hour.
ASCII2NC_FILE_WINDOW_BEGIN = 0
ASCII2NC_FILE_WINDOW_END = 0
#
# Observation data time window(s).
#
OBS_WINDOW_BEGIN = -1799
OBS_WINDOW_END = 1800

ASCII2NC_WINDOW_BEGIN = {OBS_WINDOW_BEGIN}
ASCII2NC_WINDOW_END = {OBS_WINDOW_END}

ASCII2NC_INPUT_FORMAT = {{input_format}}

# If set to True, skip run if the output file determined by the output
# directory and filename template already exists.
ASCII2NC_SKIP_IF_OUTPUT_EXISTS = False

# End of [config] section and start of [dir] section
[dir]
#
# Directory containing (observation) input to ASCII2nc.
#
ASCII2NC_INPUT_DIR = {{obs_input_dir}}
#
# Directory in which to write output from ASCII2nc.
#
# OUTPUT_BASE apparently has to be set to something; it cannot be left
# to its default value.  But it is not explicitly used elsewhere in this
# configuration file.
#
OUTPUT_BASE = {{output_base}}
ASCII2NC_OUTPUT_DIR = {{output_dir}}

# End of [dir] section and start of [filename_templates] section.
[filename_templates]
#
# Template for ascii input to ASCII2nc relative to ASCII2NC_INPUT_DIR.
#
ASCII2NC_INPUT_TEMPLATE = {{obs_input_fn_template}}
#
# Template for output from Ascii2nc relative to ASCII2NC_OUTPUT_DIR.
#
ASCII2NC_OUTPUT_TEMPLATE = {{output_fn_template}}
